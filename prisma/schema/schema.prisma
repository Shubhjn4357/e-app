// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

enum UserRole {
  ADMIN
  USER
}

enum PaymentStatus {
  PENDING
  PAID
  CANCELED
}

enum ProductStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELED
}


model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  reviews               Review[]
  orders                Order[]
  carts                 Cart[]
  Payment               Payment[]

  @@unique([email])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token]) //--> means that the combination of email and token must be unique
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token]) //--> means that the combination of email and token must be unique
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token]) //--> means that the combination of email and token must be unique
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade) //--? relation to the user model and the user id field. onDelete: Cascade means that if the user is deleted, the confirmation will also be deleted

  @@unique([userId])
}

//products

model Review {
  id        String  @id @default(cuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  rating      Int
  comment     String
}

model Image {
  id        String  @id @default(cuid())
  file      String
  productId String
  color     String?
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Product {
  id           String        @id @default(cuid())
  name         String
  description  String
  price        Float
  stock        Int
  status       ProductStatus @default(PUBLISHED)
  image        Image[]
  reviews      Review[]
  orderIds     String[]
  orders       Order[]
  cartIds      String[]
  carts        Cart[]
  categoryName String
  category     Category      @relation(fields: [categoryName], references: [name], onDelete: Cascade)
  Payment      Payment[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Order {
  id        String  @id @default(cuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Restrict)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Restrict)
  paymentId String
  payment   Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  quantity  Int
  status    OrderStatus @default(PENDING)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Payment {
  id        String        @id @default(cuid())
  userId    String
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  status    PaymentStatus @default(PENDING)
  Order     Order[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Cart {
  id        String  @id @default(cuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Category {
  id       String    @id @default(cuid())
  name     String
  products Product[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@unique([name])
}
